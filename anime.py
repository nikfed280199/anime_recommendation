# -*- coding: utf-8 -*-
"""anime.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nwByupXNYh5C1HDU8l-cs7RRnF6l3BQH
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

anime_df = pd.read_csv("/content/drive/MyDrive/Курс 3/Семестр6/CourseProject/asd/anime.csv")
anime_df.head()

anime_df.shape

anime_df.info()

plt.figure(figsize=(8,6))
sns.heatmap(anime_df.isnull())
plt.title("Отсутствующие значения в 'anime'", fontsize = 15)
plt.show()

anime_df.isnull().sum()

anime_df.fillna({'type':"TV"},inplace=True)

anime_df.fillna({'rating':0},inplace=True)

anime_df.shape

anime_df.info()

anime_df.drop('genre', axis=1, inplace=True)

anime_df.info()

plt.figure(figsize=(8,6))
sns.heatmap(anime_df.isnull())
plt.title("Отсутствующие значения в 'anime'", fontsize = 15)
plt.show()

rating_df = pd.read_csv("/content/drive/MyDrive/Курс 3/Семестр6/CourseProject/asd/rating.csv")
rating_df.head()

rating_df.shape

df = pd.merge(anime_df, rating_df, on = 'anime_id')
df.head()

fig = plt.figure(figsize=(12,10))
sns.countplot(df['type'], palette='gist_rainbow')
plt.title("Самые просматриваемые типы Аниме", fontsize=20)
plt.xlabel("Тип", fontsize=20)
plt.ylabel("Количество просмотров", fontsize = 20)
plt.legend(df['type'])
plt.show()

sns.countplot(data = df, x = "type")
plt.title("Количество просмотров аниме по типам")
plt.xlabel("Тип")
plt.ylabel("Количество прсмотров")
plt.show()

plt.figure(figsize = (8,6))
df_members = df.sort_values(by = "members", ascending = False).copy()
sns.barplot(data = df_members.iloc[0:10], y = "name", x = "members")
plt.title("Самые популярные аниме", size = 12)
plt.xlabel("Участники")
plt.ylabel("")
plt.show()

df.shape

df.rating_x.min()

df = df[df.rating_y != -1]
df.head()

df.shape

df.info()

df.isnull().sum()

df.drop('name', axis=1, inplace=True)

#df.drop('genre', axis=1, inplace=True)

df.info()

df.type.value_counts()

df = pd.get_dummies(df, columns=['type'])
df.info()

df.episodes.value_counts()

df.head(10)

df[df['episodes'] == 'Unknown']

df = df.loc[df['episodes'] != 'Unknown']

df[df['episodes'] == 'Unknown']

df.episodes = df.episodes.astype('int64')

df.info()

df.head()

#df = df[:100]

df.info()

len(df.anime_id.unique())

y = df["rating_y"]
X = df.drop("rating_y", axis=1)

X

y

"""# Строим модель"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0)

X_train

y_train

"""**LINREG**"""

from sklearn import ensemble, linear_model
from sklearn.metrics import mean_squared_error

linreg = linear_model.LinearRegression()

linreg.fit(X_train, y_train)

y_test_linreg = linreg.predict(X_test)

y_test

y_test_linreg

plt.hist(y_test)

plt.hist(y_test_linreg)

mean_squared_error(y_test_linreg, y_test)

"""**Random forest**"""

rf = ensemble.RandomForestRegressor(n_estimators=100, max_depth=10, min_samples_split=7)

rf.fit(X_train, y_train)

y_test_rf = rf.predict(X_test)

plt.hist(y_test);

plt.hist(y_test_rf);

mean_squared_error(y_test_rf, y_test)
